@inject NavigationManager NavigationManager;
@inject IDeleteProductUseCase DeleteProductUseCase;

@if (Product != null)
{
    <tr>
        <td class="col-md-5">@Product.Name</td>
        @*<td class="col-md-2">@Product.Quantity</td>*@
        <td class="col-md-4">@Product.Price.ToString("c")</td>
        <td class="col-md-3">
            <button type="button" class="btn btn-light" @onclick="@(() => EditProduct(@Product.Id))">Edit</button>
            <button type="button" class="btn btn-danger" @onclick="@(async () => {await DeleteProduct(@Product.Id);})">Delete</button>
        </td>
    </tr>
}

@code {

    [Parameter]
    public Product? Product { get; set; }

    [Parameter]
    public EventCallback OnProductDeleted { get; set; }

    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/editproduct/{id}");

    }

    private async Task DeleteProduct(int id)
    {
        await DeleteProductUseCase.ExecuteAsync(id);
        await OnProductDeleted.InvokeAsync();
    }
}
