@page "/addproduct"

@inject IAddProductUseCase AddProductUseCase;
@inject NavigationManager NavigationManager;

<h3>Add Product</h3>
<br />
@if (_product != null)
{
    <EditForm Model="_product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group mb-1">
            <label for="name">Product name</label>
            <InputText id="name" @bind-Value="_product.Name" class="form-control"></InputText>
        </div>
        @*<div class="form-group mb-1">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="_product.Quantity" class="form-control"></InputNumber>
        </div>*@
        <div class="form-group mb-3">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="_product.Price" class="form-control"></InputNumber>
        </div>

        <ProductInventoriesComponent 
        @ref="ProductInventoriesComponent"
        OnInventoriesChanged="OnInventoriesChanged"></ProductInventoriesComponent>
        <br/>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private Product? _product;
    private ProductInventoriesComponent ProductInventoriesComponent;

    protected override void OnInitialized()
    {
        _product = new Product();
    }

    private async Task OnValidSubmit()
    {
        if (_product != null)
        {
            ProductInventoriesComponent.ProductInventories.ForEach(pi =>
            {
                pi.ProductId = _product.Id;
            });

            //_product.ProductInventories = ProductInventoriesComponent.ProductInventories; 

            await AddProductUseCase.ExecuteAsync(_product);
            NavigationManager.NavigateTo("/products");
        }
    }

    private void OnInventoriesChanged(List<ProductInventory> productInventories)
    {
        _product.ProductInventories = productInventories;
    }
    
}
